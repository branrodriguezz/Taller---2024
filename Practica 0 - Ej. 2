Implementar un programa que procese información de propiedades que están a la venta
en una inmobiliaria.
Se pide:
a) Implementar un módulo para almacenar en una estructura adecuada, las propiedades
agrupadas por zona. Las propiedades de una misma zona deben quedar almacenadas
ordenadas por tipo de propiedad. Para cada propiedad debe almacenarse el código, el tipo de
propiedad y el precio total. De cada propiedad se lee: zona (1 a 5), código de propiedad, tipo
de propiedad, cantidad de metros cuadrados y precio del metro cuadrado. La lectura finaliza
cuando se ingresa el precio del metro cuadrado -1.
b) Implementar un módulo que reciba la estructura generada en a), un número de zona y un tipo de
propiedad y retorne los códigos de las propiedades de la zona recibida y del tipo recibido.

Informacion:
- De cada propiedad se lee, zona (1 a 5), cod, tipo de propiedad, cantidad de metros cuadrados y precio del metro
cuadrado. Finaliza esa lectura? Si. Cuando se ingresa el precio de m^2 -1. No lo proceso. 
- Cada propiedad almacena -> (cod,tipo de propiedad,precio total). NADA MAS.  
- Esas propiedades tienen que estar agrupadas por zona -> (1,2,3,4,5).
- Las propiedades de la misma zona -> se almacenan ordenadas por tipo de propiedad. 

program e2p0;
type
  zonas = 1..5;
  vectorzonas = array [zonas] of lista;
  propiedad = record;
    zona: zonas;
    cod: integer;
    tipo: string;
    cantm2: integer;
    preciom2: real;
  end;

  prop = record;
    cod: integer;
    tipo: string;
    preciototal: real;
  end;

  lista = ^nodo;
  nodo = record;
    ele: prop;
    sig: lista;
  end;

  listacodigos = ^nodocodigo;
  nodocodigo = record;
    ele: integer;
    sig: listacodigos;
  end;

procedure leerpropiedad (var p: propiedad);
begin
  read (p.zona);
  read (p.cod);
  read (p.tipo);
  read (p.cantm2);
  read (p.preciom2);
end;

procedure inicializarvectorzonas (var vz: vectorzonas);
var
  i: integer;
begin
  for i:= 1 to 5 do begin;
    vz [i]:= nil;
end;

procedure insertarOrdenado (var l: lista; pr: prop);
var
  nuevo, act, ant: lista; 
begin
  new (nuevo); 
  nuevo^.ele:= pr;
  nuevo^.sig:= nil;
  if (l = nil) then 
    l:= nuevo;
  else begin
    ant:= l;
    act:= l;
    while (act <> nil) and (act^.ele.tipo <> nue^.ele.tipo) do begin  
      ant:= act;
      act:= act^.sig;
    if (act = l) then
      begin
        nuevo^.sig= l;
        l:= nuevo;
      end;
    else begin
      ant^.sig:= nuevo;
      nuevo^.sig:= act;
    end;
  end;
end;    
  
procedure cargarLista (var vz: vectorzonas);
var
  p: propiedad;
  pr: prop;
begin
  leerpropiedad (p);
  while (p.preciom2 <> - 1) do begin
    pr.cod := p.cod;
    pr.tipo := p.tipo;
    pr.preciototal:= p.cantm2 * p.preciom2;
    insertarOrdenado (vz [p.zona], pr);
    leerpropiedad (p);
  end;
end;

procedure generarlistacodigos (cod: integer; var codigos: listacodigos);
var
  nue: listacodigos;
begin
  new (nue);
  nue^.ele:= cod;
  nue^.sig:= nil;
  if (codigos = nil) then
    codigos:= nue;
  else begin
    nue^.sig:= codigos;
    codigos:= nue;
  end;
end;

procedure recorrerzona (l: lista; tipop: string, var codigos: listacodigos);
begin
  while (l <> nil) do begin
    if (tipop = l^.ele.tipo) then 
      generarlistacodigos (l^.ele.cod, codigos);
  end;
end;

procedure incisoB (vz: vectorzonas; numzona: zonas; tipop: string; var codigos: listacodigos);
var
  i: integer;
begin
  for i: 1 to 5 do begin
    if (numzona = i) then 
      recorrerzona (vz [i], tipop, codigos);
  end;
end; 

var 
  numzona: zonas;
  tipop: string;
  vz: vectorzonas;
  codigos: listacodigos;
begin
  inicializarvectorzonas (vz);
  cargarLista (vz); 
  read (numzona);
  read (tipop);
  incisoB (vz,numzona,tipop,codigos);
end.
