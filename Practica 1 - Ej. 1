1.- Se desea procesar la información de las ventas de productos de un comercio (como máximo 50).
Implementar un programa que invoque los siguientes módulos:
a. Un módulo que retorne la información de las ventas en un vector. De cada venta se conoce el día de la venta, 
código del producto (entre 1 y 15) y cantidad vendida (como máximo 99 unidades). 
El código debe generarse automáticamente (random) y la cantidad se debe leer. El ingreso de las ventas finaliza 
con el día de venta 0 (no se procesa).
b. Un módulo que muestre el contenido del vector resultante del punto a).
c. Un módulo que ordene el vector de ventas por código.
d. Un módulo que muestre el contenido del vector resultante del punto c).
e. Un módulo que elimine, del vector ordenado, las ventas con código de producto entre dos valores que se ingresan como parámetros.
f. Un módulo que muestre el contenido del vector resultante del punto e).
g. Un módulo que retorne la información (ordenada por código de producto de menor a mayor) de cada código par de producto junto a la cantidad total de productos vendidos.
h. Un módulo que muestre la información obtenida en el punto g).

program ej1p1;
const
  dimF = 50;
type
  comercio = 1..dimF;
  dias = 1..31;
  codigo = 1..15;
  unidades = 1..99;
  venta = record;
    dia: dias;
    cod: codigo;
    cantv: unidades;
  end;
  superventas = array [comercio] of venta;

procedure leerventas (var v: ventas);
var
  codi: codigo;
begin
  read (v.dias);
  if (v.dias <> 0) then
    begin
      v.cod:= Random (15) + 1;
      read (v.cantv);
    end;
end;

procedure cargarVenta (var sv: superventas; v: venta; var dimL: comercio);
begin
    if (dimL < dimF) do begin
      dimL:= dimL + 1;
      sv [dimL]:= v;
    end; 
end;

procedure procesarventas (var sv: superventas; var dimL: comercio);
var
  v: ventas;
begin  
  leerventas (v);
  while (v.dias <> 0) do begin
    cargarVenta (sv,v, dimL);
    leerventas (v);
  end;
end;

procedure imprimirVenta (v: venta);
begin
  writeln (v.dia);
  writeln (v.cod);
  writeln (v.cantv);
end;

procedure mostrarcontenido (sv: superventas; dimL: comercio);
var
  i: comercio;
begin
  for i:= 1 to dimL do begin
    imprimirVenta (sv[i]);
  end;
end;

procedure ordenarporcodigo (var sv: superventas; dimL: comercio);
var
  i,j: comercio;
  actual: codigo; 
begin
  for i:= 2 to dimL do begin //siempre 2?
    actual:= sv[i].cod;
    j:= i - 1;
    while (j > 0) and (sv[j].cod > actual) do
      begin
        sv[j+1].cod:= sv[j].cod;
        j:= j - 1;
      end;
    sv[j+1].cod:= actual;
end;

function buscarcod (sv: superventas; dimL: comercio; valor1: codigo): comercio;
var
  aux: comercio;
begin
  aux:= 1;
  while (aux <= dimL) do begin
    if (sv[aux].cod = valor1) then
        buscarcod:= aux;
    else
      aux:= aux + 1;
  end;
end;

procedure eliminarporcodigo (var sv: superventas; var dimL: comercio; pos1, pos2: codigo);
var
  i,j: comercio;
  pos: integer;
  val1,val2: integer;
begin
  val1:= pos1;
  val2:= pos2;
  while (vs[pos1].cod < vs[pos2].cod) do begin
      for j:= aux to (dimL - 1)do begin
        sv[j]
  
        
end; 

var
  sv: superventas;
  dimL: comercio;
  valor1,valor2: codigo;
begin
  Randomize;
  dimL:= 0;
  procesarventas (sv,dimL); // inciso A.
  mostrarcontenido (sv, dimL); //inciso B.
  ordenarporcodigo (sv, dimL); inciso C;
  mostrarcontenido (sv, dimL); inciso D;
  readln (valor1);
  readln (valor2);
  eliminarporcodigo (sv,dimL, buscarcod(sv,dimL,valor1),buscarcod(sv,dimL,valor2)); inciso E;
  mostrarcontenido (sv, dimL); inciso F;
end.
